<?xml version="1.0" encoding="UTF-8"?>
<beans 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">


<!-- DB를 이용해서 인증에 필요한 사용자 정보를 조회하기 위함. 
사용자 정보 조회를 위한 DB 조회를 하는 dataSource bean객체 지정. -->
<sec:authentication-manager alias="authenticationManager">
	<sec:authentication-provider>
		<!-- 로그인 시, DB에 있는 비밀번호와 비교할 사용자 입력값의 비밀번호 암호화. -->
		<sec:password-encoder ref="passwordEncoder"/>
		
		<!-- <jdbc-user-service>태그 설정 시, id 속성사용하면 JdbcUserDetailsManager 객체(사용자관리 위한..)를 
		빈으로 등록할 때 사용할 식별값 지정 가능. -->
		<sec:jdbc-user-service data-source-ref="dataSource" id="jdbcUserService"
			users-by-username-query="SELECT USERNAME AS id, PASSWORD AS pwd, ENABLED 
												   FROM USERS WHERE USERNAME=?"
			
			authorities-by-username-query="select id, authority from member_authority
															where id=?"
			
		/>
	</sec:authentication-provider>
</sec:authentication-manager>
<!-- authorities-by-username-query="SELECT USERNAME AS id, AUTHORITY AS authority 
         												  FROM USERS
          												  WHERE USERNAME=?" -->

<!-- pattern속성으로 지정한 경로에 대해서 스프링 시큐리티의 필터체인을 적용하지 않는다. -->
<!-- 확장자를 이용해 패턴 걸 때, /**/*.확장자명 으로 할 것.(Ant pattern 규칙
	pattern="/**/*.js"
	pattern="/**/*.css"
	pattern="/image/*"
	등..
 -->
<sec:http pattern="/**/css/**" security="none"/>
<sec:http pattern="/**/js/**" security="none"/>
<sec:http pattern="/**/images/**" security="none"/>

<!-- use-expressions="true" : intercept-url 태그의 access 속성에서 SpEL(스프링 표현식) 사용 여부. true면 사용. -->
<sec:http use-expressions="true" auto-config="true">
	<!-- 로그인 후, 권한이 없어서 접근하지 못하는 페이지 이동 시, 처리할 페이지나 빈 지정. -->
	<sec:access-denied-handler error-page="/exception/accessDenied.do" />
	
	<!-- intercept-url 태그는 접근 권한 설정 시, 사용. 
		pattern : 접근 경로를 Ant패턴으로 설정.
		access 속성 :  해당 경로 패턴에 누가 접근 가능한지를 설정.
		
		intercept-url 태그는 순서대로 적용된다.
		ex) '/manager/main' 경로로 접근할 경우, '/manager/**' 패턴을 설정한 intercept-url태그를 수행하며,
		그 밑줄에 위치한 intercept-url태그들은 적용되지 않는다.
		'/home/main' 경로로 접근 시, 위의 모든 intercept-url태그에 걸리지 않으므로, 맨 밑의 '/**' pattern을 설정한
		intercept-url 태그만 적용된다.
		
		intercept-url 태그의 access 속성값으로 hasAuthority(), hasRole, authenticated 등은 스프링에서 제공하는
		스프링 표현식(spEL)이고, WebExpressionVoter는 이 SpEL로 설정한 권한을 가졌는지 검사한다.
	-->
	<sec:intercept-url pattern="/main.do" access="permitAll" />
	<sec:intercept-url pattern="/**/login/login.do" access="isAnonymous()" />
	<sec:intercept-url pattern="/user/join/AgreementTerms.do" access="isAnonymous()" />
	<sec:intercept-url pattern="/user/searchId.do" access="isAnonymous()" /> <!-- 2016.08.11추가. 이게 없으면 '/user/**'부분을 타서 main.do로 바로 간다.-->
	<sec:intercept-url pattern="/user/searchPw.do" access="isAnonymous()" /> <!-- 2016.08.11추가. 이게 없으면 '/user/**'부분을 타서 main.do로 바로 간다.-->
	<sec:intercept-url pattern="/user/findIdPw/**" access="isAnonymous()" />
<!-- <sec:intercept-url pattern="/board/**" access="hasAnyAuthority('ROLE_USER', 'ROLE_ADMIN')" />  -->
	<sec:intercept-url pattern="/board/**" access="permitAll" />
	<sec:intercept-url pattern="/user/**" access="hasAnyAuthority('ROLE_USER', 'ROLE_ADMIN')" />
	<sec:intercept-url pattern="/admin/**" access="hasAuthority('ROLE_ADMIN')" />
	<sec:intercept-url pattern="/manager/**" access="hasAuthority('ROLE_MANAGER')" />
	<sec:intercept-url pattern="/member/**" access="hasAuthority('ROLE_USER')" />
	<sec:intercept-url pattern="/**" access="permitAll" />
	<!-- 
		form-login태그는 두 가지 기능을 제공.
		1. 인증된 사용자만 허용되는 자원/경로에 접근  시, 로그인 폼을 보여준다.
		2. 로그인 폼에서 아이디/암호를 전송하면, 로그인(인증) 처리를 한다.
		
		username-parameter, password-parameter : 로그인 페이지에서 id와 pwd를 입력받는 input text의
		name 값을 spring에서 정해진 j_username, j_password가 아닌 다른 값으로 지정하기 위함. 
		-default-target-url : 로그인 성공 후, 이동할 페이지.
	 -->
	<!-- login-page : 로그인 화면 URL 지정. 인증을 받지 않은 상태에서 권한이 필요한 화면을 접근할 경우 인증을 받기 위한 로그인 화면을 띄운다. 그 때 보여지는 화면 URL이 바로 이 속성이다. -->
	<!-- always-use-default-target="true" : 로그인 성공후에 default-target-url에 설정한 곳으로 갈지 말지 설정 -->
	<!-- authentication-failure-url="/login/login.action?error" : 로그인 실패하면 보내는 주소 -->
	<!-- authentication-success-handler-ref : 로그인 성공후에 실행될 클래스 -->		
	<sec:form-login
			username-parameter="id" 
			password-parameter="pwd" 
			login-page="/user/login/login.do"
			default-target-url="/main.do" 
			authentication-failure-url="/user/login/login.do?fail=true" 
	/>
	<sec:logout logout-success-url="/main.do" invalidate-session="true"/>
	
	<sec:session-management invalid-session-url="/main.do">
			<sec:concurrency-control max-sessions="1" expired-url="/main.do" />
			<!--  max-sessions="1"  세션을 한개만 허용(새로운 세션을 접속하게 하고 기존에 접속한 세션을 죽임),  
			<concurrency-control error-if-maximum-exceeded="true" /> 로그인을 하나의 브라우져만 가능케함
			(크롬과 IE창을 같이 띄어놓고 먼저 크롬에서 접속한 상태에서 IE로 접속을 못함(새로운 세션 접속을 차단함, 단점은 로그아웃을 해도 세션이 안풀릴때가 있어서 로그인이 안될경우가 발생한다고 함, 되도록 이 설정은 하지말라네)-->
	</sec:session-management>
</sec:http>

<!-- DB에서 사용자 조회하기 전, 스프링 시큐리티 테스트 코드. 
<sec:authentication-manager>
	<sec:authentication-provider>
		<sec:user-service>
			<sec:user name="rch" password="1234" authorities="ROLE_USER"/>
			<sec:user name="manager" password="1234" authorities="ROLE_MANAGER"/>
			<sec:user name="admin" password="1234" authorities="ROLE_ADMIN, ROLE_USER"/>
		</sec:user-service>
	</sec:authentication-provider>
</sec:authentication-manager>
-->

<!-- 스프링 시큐리티 로그인 실패 화면에서 에러 메시지가 한글로 나오게 하기 위함. -->
<!-- 공식적인 방법은 아님. spring security...jar 파일에 있는 한글message.properties를 복사해서 다른 경로에 따로 복사 후,-->
<!-- 그 경로의 한글 properties 파일을 불러오는 형식. -->
<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    	<property name="basename">
    		<value>/WEB-INF/messages/spring_security_messages_ko_KR</value>
    	</property>
    	<property name="defaultEncoding" value="UTF-8"></property>
    	<property name="cacheSeconds" value="5"></property>
</bean>

<bean id="passwordEncoder"  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

<!-- <bean id="userJoinService" class="goodperson.security.user.UserJoinService">
	<property name="userDetailsManager" ref="jdbcUserService" />
	<property name="passwordEncoder" ref="passwordEncoder" />
</bean> -->

</beans>